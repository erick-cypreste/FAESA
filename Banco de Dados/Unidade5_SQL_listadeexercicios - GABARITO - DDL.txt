--1
DROP TABLE UNIDADE_ESTOQUE;
CREATE TABLE UNIDADE_ESTOQUE
(
    COD_UNIDADEESTOQUE  VARCHAR2(3)  NOT NULL,
    DESC_UNIDADEESTOQUE VARCHAR2(40) NOT NULL
);
DROP TABLE PRODUTOS;
CREATE TABLE PRODUTOS
(
    COD_PRODUTO        NUMBER       NOT NULL,
    COD_UNIDADEESTOQUE VARCHAR2(3)  NULL,
    NOME_PRODUTO       VARCHAR2(40) NOT NULL,
    PRECO_PRODUTO      NUMBER(8,2)  NOT NULL,
    QUANT_PRODUTO      NUMBER(8,3)  NOT NULL
);

--2
ALTER TABLE UNIDADE_ESTOQUE ADD PRIMARY KEY (COD_UNIDADEESTOQUE);
ALTER TABLE PRODUTOS ADD PRIMARY KEY (COD_PRODUTO);

--5
ALTER TABLE PRODUTOS 
ADD CONSTRAINT PRO_FK FOREIGN KEY (COD_UNIDADEESTOQUE)
REFERENCES UNIDADE_ESTOQUE (COD_UNIDADEESTOQUE);

--7
ALTER TABLE PRODUTOS ADD (LOCALIZACAO VARCHAR2(20) NULL);

--8
CREATE UNIQUE INDEX IDX_NOME_PRODUTO ON PRODUTOS (NOME_PRODUTO);

--10
CREATE OR REPLACE VIEW VW_PRODUTO AS 
SELECT P.NOME_PRODUTO, UE.DESC_UNIDADEESTOQUE
  FROM PRODUTOS P
  INNER JOIN UNIDADE_ESTOQUE UE
  ON (P.COD_UNIDADEESTOQUE = UE.COD_UNIDADEESTOQUE);

--13
INSERT INTO UNIDADE_ESTOQUE
SELECT * FROM UE;

--14
INSERT INTO PRODUTOS(COD_PRODUTO, COD_UNIDADEESTOQUE, NOME_PRODUTO, 
                     PRECO_PRODUTO, QUANT_PRODUTO)
SELECT *
  FROM PRO
 WHERE PRO_PRECO IS NOT NULL
   AND PRO_QT IS NOT NULL;

------------------------------------13042021---------------------------------------------------------------
SELECT * FROM VW_PRODUTO;

--1
INSERT INTO PRODUTOS(COD_PRODUTO, COD_UNIDADEESTOQUE, NOME_PRODUTO,
                     PRECO_PRODUTO, QUANT_PRODUTO, LOCALIZACAO)
              VALUES(43, 'kg', 'FARINHA DA ARROZ', 11, 150, 'C1-P63-L4');

INSERT INTO PRODUTOS(COD_PRODUTO, COD_UNIDADEESTOQUE, NOME_PRODUTO,
                     PRECO_PRODUTO, QUANT_PRODUTO, LOCALIZACAO)
              VALUES((
                      SELECT MAX(COD_PRODUTO) + 1
                        FROM PRODUTOS
                      ), 
                    'kg', 
                    'FARINHA DE MILHO', 
                    3.5, 
                    75,
                    'C1-P63-L3');

--2
INSERT INTO PRODUTOS(COD_PRODUTO, COD_UNIDADEESTOQUE, NOME_PRODUTO,
                     PRECO_PRODUTO, QUANT_PRODUTO)
              VALUES(42, 'kg', 'FARINHA DA AMENDOA', 22, 100);

INSERT INTO PRODUTOS(COD_PRODUTO, COD_UNIDADEESTOQUE, NOME_PRODUTO,
                     PRECO_PRODUTO, QUANT_PRODUTO)
              VALUES((
                      SELECT MAX(COD_PRODUTO) + 1
                        FROM PRODUTOS
                      ), 
                    'kg', 
                    'FARINHA DE MANDIOCA', 
                    3.5, 
                    200);


--EXTRA
UPDATE PRODUTOS
   SET NOME_PRODUTO = 'FARINHA DE ARROZ'
 WHERE COD_PRODUTO  = 43;

UPDATE PRODUTOS
   SET NOME_PRODUTO = 'FARINHA DE AMENDOA'
 WHERE COD_PRODUTO  = 42;

UPDATE PRODUTOS
   SET NOME_PRODUTO = LOWER(NOME_PRODUTO)
 WHERE COD_PRODUTO  IN (42, 43, 111);

--UPDATE--
--1
/*SELECT *
  FROM PRODUTOS P
 WHERE P.PRECO_PRODUTO < 10;*/

UPDATE PRODUTOS
   SET PRECO_PRODUTO = 1.5 * PRECO_PRODUTO
 WHERE PRECO_PRODUTO < 10;

--2
UPDATE PRODUTOS
   SET NOME_PRODUTO = 'Feijão Preto e Branco'
 WHERE COD_PRODUTO  = 3;

--3
--SELECT * FROM UNIDADE_ESTOQUE WHERE COD_UNIDADEESTOQUE = 'l';
UPDATE PRODUTOS
   SET PRECO_PRODUTO = 0.6 * PRECO_PRODUTO
 WHERE COD_UNIDADEESTOQUE = 'l'; --CONHEÇO O CÓDIGO DA UNIDADE DE ESTOQUE LITRO

UPDATE PRODUTOS
   SET PRECO_PRODUTO = 0.6 * PRECO_PRODUTO
 --CONHEÇO O CÓDIGO DA UNIDADE DE ESTOQUE LITRO
 WHERE COD_UNIDADEESTOQUE IN (SELECT COD_UNIDADEESTOQUE 
                                FROM UNIDADE_ESTOQUE 
                               WHERE DESC_UNIDADEESTOQUE = 'LITRO'); 
  
--VERIFICAR A ALTERAÇÃO FEITA ANTERIORMENTE
SELECT * 
  FROM PRODUTOS 
 WHERE COD_UNIDADEESTOQUE IN (SELECT COD_UNIDADEESTOQUE 
                                FROM UNIDADE_ESTOQUE 
                               WHERE DESC_UNIDADEESTOQUE = 'LITRO')

--4
UPDATE UNIDADE_ESTOQUE
   SET DESC_UNIDADEESTOQUE = 'inutilizado'
 WHERE COD_UNIDADEESTOQUE IN (SELECT UE.COD_UNIDADEESTOQUE
                                FROM UNIDADE_ESTOQUE UE 
                               WHERE lower(UE.COD_UNIDADEESTOQUE) NOT IN (SELECT lower(P.COD_UNIDADEESTOQUE) 
                                                                            FROM PRODUTOS P
                                                                           WHERE P.COD_UNIDADEESTOQUE IS NOT NULL))

--DELETE

DELETE FROM PRODUTOS WHERE COD_PRODUTO = 112;
--1
SELECT * FROM PRODUTOS WHERE COD_PRODUTO = 20;
DELETE FROM PRODUTOS WHERE COD_PRODUTO = 20;

--2
SELECT * 
  FROM PRODUTOS 
 WHERE COD_UNIDADEESTOQUE IN (SELECT COD_UNIDADEESTOQUE 
                                FROM UNIDADE_ESTOQUE 
                               WHERE DESC_UNIDADEESTOQUE = 'LITRO');

DELETE
  FROM PRODUTOS 
 WHERE COD_UNIDADEESTOQUE IN (SELECT COD_UNIDADEESTOQUE 
                                FROM UNIDADE_ESTOQUE 
                               WHERE DESC_UNIDADEESTOQUE = 'LITRO')

--3
SELECT * FROM PRODUTOS P
WHERE (
SELECT COUNT(1)
  FROM ITE
 WHERE ITE.PRO_COD = P.COD_PRODUTO
) < 3;

DELETE FROM PRODUTOS P
WHERE (
SELECT COUNT(1)
  FROM ITE
 WHERE ITE.PRO_COD = P.COD_PRODUTO
) < 3;

--4
SELECT * 
  FROM CLI
 WHERE UPPER(CLI.CLI_CID) = 'VILA VELHA'
   AND CLI.CLI_COD IN (SELECT PED.CLI_COD
                         FROM PED
                         INNER JOIN ITE
                         ON PED.PED_COD = ITE.PED_COD
                         INNER JOIN PRO
                         ON ITE.PRO_COD = PRO.PRO_COD
                         WHERE UPPER(PRO.PRO_NOME) = 'ARROZ');

--NÃO IRÁ APAGAR, POIS PRECISA APAGAR O PEDIDO E OS ITENS DE PEDIDO ANTES
DELETE 
  FROM CLI
 WHERE UPPER(CLI.CLI_CID) = 'VILA VELHA'
   AND CLI.CLI_COD IN (SELECT PED.CLI_COD
                         FROM PED
                         INNER JOIN ITE
                         ON PED.PED_COD = ITE.PED_COD
                         INNER JOIN PRO
                         ON ITE.PRO_COD = PRO.PRO_COD
                         WHERE UPPER(PRO.PRO_NOME) = 'ARROZ')
--1
SELECT * FROM CLI;

--3
SELECT DISTINCT C.CLI_CID, C.UF_COD, C.CLI_CEP
  FROM CLI C;

SELECT COUNT(1) AS TOTAL,
       C.CLI_CID, 
       C.UF_COD, 
       C.CLI_CEP
  FROM CLI C
 GROUP BY C.CLI_CID, C.UF_COD, C.CLI_CEP;

--5
SELECT P.*
  FROM PED P
 WHERE P.PED_VL_TOT NOT BETWEEN 100 AND 500
   AND TO_CHAR(P.PED_DT, 'DD/MM/YYYY') BETWEEN '13/01/2007' AND '14/01/2007';

SELECT P.*
  FROM PED P
 WHERE (P.PED_VL_TOT < 100 OR  P.PED_VL_TOT > 500)
   AND TO_CHAR(P.PED_DT, 'DD/MM/YYYY') >= '13/01/2007' 
   AND TO_CHAR(P.PED_DT, 'DD/MM/YYYY') <= '14/01/2007';

--7
SELECT *
  FROM PRO
 WHERE UPPER(PRO_NOME) LIKE 'M%AN%A';

--8
SELECT *
  FROM PRO
 WHERE LENGTH(PRO_NOME) = 8 
   AND UPPER(PRO_NOME) LIKE 'MA%';

SELECT *
  FROM PRO
 WHERE UPPER(PRO_NOME) LIKE 'MA______';

--10
SELECT *
  FROM PRO
 WHERE UPPER(PRO_NOME) LIKE '%A/_P%' ESCAPE '/';

--13
SELECT P.PRO_NOME  AS "NOME DO PRODUTO", 
       P.PRO_PRECO AS "PREÇO DO PRODUTO", 
       U.UE_DESC   AS "DESCRIÇÃO DA UNIDADE DE ESTOQUE"
  FROM PRO P, UE U
 WHERE P.UE_COD = U.UE_COD
   AND ((P.PRO_PRECO < 20) OR (P.PRO_PRECO IS NULL))
   AND UPPER(U.UE_DESC) IN ('KILOGRAMA', 'LITRO');

SELECT P.PRO_NOME  AS "NOME DO PRODUTO", 
       P.PRO_PRECO AS "PREÇO DO PRODUTO", 
       U.UE_DESC   AS "DESCRIÇÃO DA UNIDADE DE ESTOQUE"
  FROM PRO P
  INNER JOIN UE U
     ON P.UE_COD = U.UE_COD 
 WHERE ((P.PRO_PRECO < 20) OR (P.PRO_PRECO IS NULL))
   AND UPPER(U.UE_DESC) IN ('KILOGRAMA', 'LITRO');

--14
SELECT PED.ped_cod, CLI.cli_cod, CLI.cli_nome,
       PRO.pro_cod, PRO.pro_nome, UE.ue_cod,
       UE.ue_desc
FROM PED, CLI, PRO, ITE, UE
WHERE PED.cli_cod = CLI.cli_cod
AND ITE.ped_cod = PED.ped_cod
AND ITE.pro_cod = PRO.pro_cod
AND UE.ue_cod = PRO.ue_cod;

SELECT PED.ped_cod, CLI.cli_cod, CLI.cli_nome,
       PRO.pro_cod, PRO.pro_nome, UE.ue_cod,
       UE.ue_desc
FROM PED
INNER JOIN CLI
   ON CLI.cli_cod = PED.cli_cod
INNER JOIN ITE
   ON ITE.ped_cod = PED.ped_cod
INNER JOIN PRO
   ON PRO.pro_cod = ITE.pro_cod
INNER JOIN UE
   ON UE.ue_cod = PRO.ue_cod;

--16
 SELECT CLI.CLI_COD  as codigo,
        CLI.CLI_NOME as nome,
        SUM(PED.PED_VL_TOT) as valor_total
   FROM CLI, PED 
  WHERE PED.CLI_COD = CLI.CLI_COD 
  GROUP BY CLI.CLI_COD, CLI.CLI_NOME
  ORDER BY valor_total DESC;

 SELECT CLI.CLI_COD  as codigo,
        CLI.CLI_NOME as nome,
        SUM(PED.PED_VL_TOT) as valor_total
   FROM CLI 
   INNER JOIN PED 
     ON PED.CLI_COD = CLI.CLI_COD 
 GROUP BY CLI.CLI_COD, CLI.CLI_NOME
 ORDER BY valor_total DESC;

 --19
SELECT ITE.PRO_COD,
       ROUND(AVG(ITE_QT), 3),
       TRUNC(AVG(ITE_QT))
  FROM ITE
 GROUP BY ITE.PRO_COD;

 --20
SELECT UF.UF_DESC, COUNT(CLI.CLI_COD)
  FROM UF, CLI
 WHERE CLI.UF_COD = UF.UF_COD
   AND CLI.CLI_COD IN (SELECT PED.CLI_COD FROM PED)
 GROUP BY UF_DESC;

 --21
 SELECT PED.CLI_COD,
        ROUND(AVG(PED.PED_VL_TOT),2) AS MEDIA_COMPRADO
    FROM PED
   WHERE PED.PED_VL_TOT > 100
   GROUP BY PED.CLI_COD